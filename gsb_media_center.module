<?php

/**
 * Implements hook_views_api().
 */
function gsb_media_center_views_api($module, $api) {
  if ($module == "views" && $api == "views_default") {
    return array(
      'version' => '3.0',
      'path' => drupal_get_path('module', 'gsb_media_center') .'/includes',
    );
  }
}

/**
 * Implements hook_forms().
 */
function gsb_media_center_forms() {
  $forms['gsb_media_center_add_files_and_docs_upload'] = array(
    'callback' => 'file_entity_add_upload',
  );

  $forms['gsb_media_center_add_image_upload'] = array(
    'callback' => 'file_entity_add_upload',
  );

  $forms['gsb_media_center_add_video_upload'] = array(
    'callback' => 'media_internet_add',
  );

  return $forms;
}

/**
 * Implements hook_element_info_alter().
 */
function gsb_media_center_element_info_alter(&$types) {
  if (isset($types['media'])) {
    $types['media']['#process'][] = 'gsb_media_center_element_process';
  }
}

/**
 * Process callback for the media form element.
 */
function gsb_media_center_element_process(&$element, &$form_state, $form) {
  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
  drupal_add_js(drupal_get_path('module', 'gsb_media_center') . '/js/gsb_media_center.js', array());
  drupal_add_js(drupal_get_path('module', 'gsb_media_center') . '/js/gsb_media_center_confirm_remove.js', array('weight' => -20));
  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function gsb_media_center_form_gsb_media_center_add_video_upload_alter(&$form, &$form_state) {
  if ($form_state['submitted'] && $form_state['triggering_element']['#id'] == 'edit-previous') {
    drupal_add_js(drupal_get_path('module', 'gsb_media_center') . '/js/gsb_media_center_video_upload.js', 
            array('weight' => 5 ));
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function gsb_media_center_form_media_format_form_alter(&$form, &$form_state) {

  // We are limiting the formatting options based on the media types
  // These lists show the options that will be displayed to the user for...
  
  // Options if media type == 'image'
  $image_format_options = array(
    'default',
    'teaser',
  );

  // Options if media type == 'video'
  $video_format_options = array(
    'default',
    'teaser',
    'preview',
  );

  // Note no options will be shown if media type == 'document'
  
  if (isset($form['options']['format']['#options'])) {
    foreach($form['options']['format']['#options'] as $format_option => $value) {
      if ($form['#media']->type == 'image') {
        if (!in_array($format_option, $image_format_options)) {
          // remove options not supported for 'image'
          unset($form['options']['format']['#options'][$format_option]);
        }
      }
      if ($form['#media']->type == 'video') {
        if (!in_array($format_option, $video_format_options)) {
          // remove options not supported for 'video'
          unset($form['options']['format']['#options'][$format_option]);
        }
      }
      if ($form['#media']->type == 'document') {
        // hide the option dropdown
        // note: changing the #access to FALSE didn't work,
        // because it caused a javascript error in wysiwyg.js
        // so... to keep this simple we are just hiding the format select
        //$form['options']['format']['#access'] = FALSE;
        $form['options']['format']['#prefix'] = '<span style="display: none;">';
        $form['options']['format']['#suffix'] = '</span>';
        break;
      }
    }
  }
  
  //Adding title to the document link
  $form['#attached']['js'][] = drupal_get_path('module', 'gsb_media_center') . '/js/gsb_media_center_file_title.js';
  $setting = array();
  $file = clone $form['#media'];
  $file->filename = '-media_title-';
  $file->field_title['und'][0]['value'] = '-media_title-';
  $file = gsb_media_center_file_formatter_document_view($file);
  $setting['media']['wysiwyg_document'] = render($file);

  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => $setting,
  );
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function gsb_media_center_form_gsb_media_center_add_files_and_docs_upload_alter(&$form, &$form_state) {
  if ($form_state['submitted'] && $form_state['triggering_element']['#id'] == 'edit-previous') {
    drupal_add_js(drupal_get_path('module', 'gsb_media_center') . '/js/gsb_media_center_file_upload.js', 
            array('weight' => 5 ));
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function gsb_media_center_form_views_exposed_form_alter(&$form, &$form_state) {

  // Make sure we are only messing with exposed forms with sections.
  if (isset($form['field_sections_tid'])) {
    $new_default = array();
    global $user;
    // If we don't have workbench_access data load it.
    if (empty($user->workbench_access)) {
      workbench_access_user_load_data($user);
    }

    // Loop through the available options.
    foreach($form['field_sections_tid']['#options'] as $key => $value) {
      // If the user has access add it to our input key.
      // Otherwise remove it from the available options.
      if (isset($user->workbench_access[$key])) {
        $new_default[$key] = $key;
      }
      else {
        unset($form['field_sections_tid']['#options'][$key]);
      }
    }

    // We only need to set our input value if it's our first time through.
    if (!isset($form_state['input']['sections_processed'])) {
      // Views requires us to not only set the form, but the form_state.
      $form['field_sections_tid']['#default_value'] = $new_default;
      $form_state['input']['field_sections_tid'] = $new_default;
    }

    // Keeps track if we've already processed the section.
    $form['sections_processed'] = array(
      '#type' => 'hidden',
      '#value' => TRUE,
    );

  }
}

/**
 * Implements hook_file_default_types_alter().
 */
function gsb_media_center_file_default_types_alter(&$types) {
  $types['document']->mimetypes[] = 'application/zip';
}

/**
 * Implements hook_form_FORM_ID_alter
 */
function gsb_media_center_form_file_entity_add_upload_alter(&$form, &$form_state) {
  $form['#submit'] = array_merge($form['#submit'], array('gsb_media_center_file_entity_add_upload_submit'));
  if (isset($form['actions']['previous']['#submit'])) {
    $form['actions']['previous']['#submit'] = array_merge(
      $form['actions']['previous']['#submit'],
      array('gsb_media_center_file_entity_add_upload_submit')
    );
  }
}

/**
 * Implements form submit callback
 * this was implemented to skip step 3 scheme selection
 */
function gsb_media_center_file_entity_add_upload_submit($form, &$form_state) {
  $trigger = $form_state['triggering_element']['#id'];
  if (isset($form_state['step']) && $form_state['step'] == 3 && $trigger != 'edit-previous') {
    $form_state['storage']['scheme'] = file_default_scheme();
    $form_state['step'] = 4;
  }
  elseif (isset($form_state['step']) && $form_state['step'] == 3 && $trigger == 'edit-previous') {
    $form_state['storage']['scheme'] = file_default_scheme();
    $form_state['step'] = 2;
    $file = file_load($form_state['storage']['upload']);
    $candidates = file_entity_get_filetype_candidates($file);
    if (count($candidates) == 1) {
      $candidates_keys = array_keys($candidates);
      // There is only one possible filetype for this file. Skip the second page.
      $form_state['step'] = 1;
      $form_state['storage']['type'] = reset($candidates_keys);
    }
  }
}

/**
 * Implements hook_entity_info_alter
 */
function gsb_media_center_entity_info_alter(&$entity_info) {
  $entity_info['file']['view modes']['wysiwyg_document'] = array(
    'label' => t('Wysiwyg Document'),
    'custom settings' => FALSE,
  );
}

/**
 * Implements hook_file_formatter_info().
 */
function gsb_media_center_file_formatter_info() {
  // Add a simple file formatter for displaying an image in a chosen style.
  if (module_exists('image')) {
    $formatters['gsb_media_center_file_formatter_document'] = array(
      'label' => t('GSB Document'),
      'default settings' => array(
        'title' => ''
      ),
      'view callback' => 'gsb_media_center_file_formatter_document_view',
      'settings callback' => 'gsb_media_center_file_formatter_document_settings',
    );
    // Provide default token values.
    if (module_exists('token')) {
      $formatters['gsb_media_center_file_formatter_document']['default settings']['title'] = '[file:field_title]';
    }
    elseif (module_exists('entity_token')) {
      $formatters['gsb_media_center_file_formatter_document']['default settings']['title'] = '[file:field-title]';
    }
  }

  return $formatters;
}

/**
 * Implements hook_file_formatter_FORMATTER_view().
 *
 * Returns a drupal_render() array to display a document with title taken from token.
 */
function gsb_media_center_file_formatter_document_view($file, $display = array(), $langcode = '') {
  $element = array();
  if (!$file->filesize) {
    return;
  }
  if ($file->type == 'document') {
    $replace_options = array(
      'clear' => 1,
      'sanitize' => 0,
    );
    if (isset($display['settings']['title'])) {
      $title = token_replace($display['settings']['title'], array('file' => $file), $replace_options);
    }
    if (isset($title)) {
      $file->filename = $title;
    }
    $element = array(
      '#theme' => 'file_link',
      '#file' => $file,
    );
  }
  return $element;
}

function gsb_media_center_file_formatter_document_settings($form, &$form_state, $settings) {
  // Allow the setting of the title.
  $element['title'] = array(
    '#title' => t('Link Title'),
    '#description' => t('The text to use as title for the document link. Leave blank to use filename.'),
    '#type' => 'textfield',
    '#default_value' => $settings['title'],
  );

  if (module_exists('token')) {
    $element['title']['#description'] .= t('This field supports tokens.');
    $element['tokens'] = array(
      '#theme' => 'token_tree',
      '#token_types' => array('file'),
      '#dialog' => TRUE,
    );
  }

  return $element;
}
